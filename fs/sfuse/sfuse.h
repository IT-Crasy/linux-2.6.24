/*
 * Copyright (c) 1997-2007 Erez Zadok <ezk@cs.stonybrook.edu>
 * Copyright (c) 2001-2007 Stony Brook University
 *
 * For specific licensing information, see the COPYING file distributed with
 * this package, or get one from
 * ftp://ftp.filesystems.org/pub/fistgen/COPYING.
 *
 * This Copyright notice must be kept intact and distributed with all
 * fistgen sources INCLUDING sources generated by fistgen.
 */
/*
 * File: fistgen/templates/Linux-2.6/sfuse.h
 */

#ifndef __SFUSE_H_
#define __SFUSE_H_

#ifdef __KERNEL__

/*
 * STRUCTURES:
 */


/* Turn this on to include code that counts writes and writes in the middle */
/* #undef FIST_COUNT_WRITES */

/* fist file systems superblock magic */
#define SFUSE_SUPER_MAGIC 0xf15f


/* sfuse inode data in memory */
struct sfuse_inode_info {
	inode_t *wii_inode;
        struct inode vfs_inode;
};

/* sfuse dentry data in memory */
struct sfuse_dentry_info {
	struct dentry *wdi_dentry;
	struct vfsmount *wdi_mnt;
};


/* sfuse super-block data in memory */
struct sfuse_sb_info {
	int magic;
	super_block_t *wsi_sb;
	struct fuse_conn *fc;
};

/* file private data. */
struct sfuse_file_info {
	struct file *wfi_file;
	struct fuse_file *ff;
};

/*
 * MACROS:
 */

// File TO Private Data
#define FILE_TO_PRIVATE(file) ((struct sfuse_file_info *)((file)->private_data))
#define FILE_TO_PRIVATE_SM(file) ((file)->private_data)
// File TO lower File
#define FILE_TO_LOWER(file) ((FILE_TO_PRIVATE(file))->wfi_file)
// Inode TO Private Data
#define INODE_TO_PRIVATE(ino) (container_of(ino, struct sfuse_inode_info, vfs_inode))
#define INODE_TO_PRIVATE_SM(ino) ((void*)container_of(ino, struct sfuse_inode_info, vfs_inode))
// Inode TO lower Inode
#define INODE_TO_LOWER(ino) (INODE_TO_PRIVATE(ino)->wii_inode)
#define vnode2lower INODE_TO_LOWER
// Superblock TO Private Data
#define SUPERBLOCK_TO_PRIVATE(super) ((struct sfuse_sb_info *)(super)->s_fs_info)
#define SUPERBLOCK_TO_PRIVATE_SM(super) ((super)->s_fs_info)
#define vfs2priv SUPERBLOCK_TO_PRIVATE
// Superblock TO lower Superblock
#define SUPERBLOCK_TO_LOWER(super) (SUPERBLOCK_TO_PRIVATE(super)->wsi_sb)
// Dentry TO lower Dentry (and private data --- for the future)
#define DENTRY_TO_PRIVATE_SM(dentry) ((dentry)->d_fsdata)
#define DENTRY_TO_PRIVATE(dentry) ((struct sfuse_dentry_info *)(dentry)->d_fsdata)
#define DENTRY_TO_LOWER(dent) (DENTRY_TO_PRIVATE(dent)->wdi_dentry)
#define DENTRY_TO_LVFSMNT(dent) (DENTRY_TO_PRIVATE(dent)->wdi_mnt)
#define dir2lower DENTRY_TO_LOWER
/* VMArea TO lower VMArea */
#define VMA_TO_LOWER(vma) ((vm_area_t *)((vma)->vm_private_data))

#define sbt(sb) ((sb)->s_type->name)

/* macros to simplify non-SCA code */
#define MALLOC_PAGE_POINTERS(lower_pages, num_lower_pages)
#define MALLOC_PAGEDATA_POINTERS(lower_pages_data, num_lower_pages)
#define FREE_PAGE_POINTERS(lower_pages, num)
#define FREE_PAGEDATA_POINTERS(lower_pages_data, num)
#define FOR_EACH_PAGE
#define CURRENT_LOWER_PAGE lower_page
#define CURRENT_LOWER_PAGEDATA lower_page_data
#define CURRENT_LOWER_PAGEINDEX ((pgoff_t) page->index)



/*
 * EXTERNALS:
 */
extern struct file_operations sfuse_main_fops;
extern struct file_operations sfuse_dir_fops;
extern struct inode_operations sfuse_main_iops;
extern struct inode_operations sfuse_dir_iops;
extern struct inode_operations sfuse_symlink_iops;
extern struct super_operations sfuse_sops;
extern struct dentry_operations sfuse_dops;
extern struct vm_operations_struct sfuse_shared_vmops;
extern struct vm_operations_struct sfuse_private_vmops;
extern struct address_space_operations sfuse_aops;
extern struct kmem_cache * sfuse_inode_cachep;

extern int sfuse_interpose(struct dentry *lower_dentry, struct dentry *this_dentry, super_block_t *sb, int flag);
#if defined(FIST_FILTER_DATA) || defined(FIST_FILTER_SCA)
extern page_t *sfuse_get1page(file_t *file, int index);
extern int sfuse_fill_zeros(file_t *file, page_t *page, unsigned from);
#endif /* FIST_FILTER_DATA || FIST_FILTER_SCA */

#define sfuse_lower_dentry(dentry) DENTRY_TO_LOWER(dentry)
extern ssize_t sfuse_kernel_read(struct file *file, char *buf, size_t count, loff_t *pos);
extern int sfuse_init_inodecache(void);
extern void sfuse_destroy_inodecache(void);




#define copy_inode_size(dst, src) \
    i_size_write(dst, i_size_read((struct inode *) src)); \
    dst->i_blocks = src->i_blocks;

/*
 * Three macros to simplify fixup and restore of nameidata structures
 * XXX: this code may have concurrency problems.  To prevent those
 * completely, we'd have to add a lock field into struct nameidata.
 */
#define FIST_ND_DECLARATIONS	struct dentry *saved_dentry = 0; \
				struct vfsmount *saved_vfsmount = 0
#define FIST_ND_SAVE_ARGS(this, _lower_dentry, _lower_mount)		\
				saved_dentry = nd->dentry; \
				saved_vfsmount = nd->mnt; \
				nd->dentry = (_lower_dentry); \
				nd->mnt = (_lower_mount)
#define FIST_ND_RESTORE_ARGS	nd->dentry = saved_dentry; \
				nd->mnt = saved_vfsmount;

static inline void
fist_copy_attr_atime(inode_t *dest, const inode_t *src)
{
	BUG_ON(!dest);
	BUG_ON(!src);
	dest->i_atime = src->i_atime;
}
static inline void
fist_copy_attr_ctime(inode_t *dest, const inode_t *src)
{
    BUG_ON(!dest);
    BUG_ON(!src);
    dest->i_ctime = src->i_ctime;
}
static inline void
fist_copy_attr_times(inode_t *dest, const inode_t *src)
{
	BUG_ON(!dest);
	BUG_ON(!src);
	dest->i_atime = src->i_atime;
	dest->i_mtime = src->i_mtime;
	dest->i_ctime = src->i_ctime;
}
static inline void
fist_copy_attr_timesizes(inode_t *dest, const inode_t *src)
{
	BUG_ON(!dest);
	BUG_ON(!src);
	dest->i_atime = src->i_atime;
	dest->i_mtime = src->i_mtime;
	dest->i_ctime = src->i_ctime;
	copy_inode_size(dest, src);
}
static inline void
fist_copy_attr_all(inode_t *dest, const inode_t *src)
{
	print_entry_location();
	BUG_ON(!dest);
	BUG_ON(!src);
	dest->i_mode = src->i_mode;
	dest->i_nlink = src->i_nlink;
	dest->i_uid = src->i_uid;
	dest->i_gid = src->i_gid;
	dest->i_rdev = src->i_rdev;
	dest->i_atime = src->i_atime;
	dest->i_mtime = src->i_mtime;
	dest->i_ctime = src->i_ctime;
#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,19)
	dest->i_blksize = src->i_blksize;
#endif
	dest->i_blkbits = src->i_blkbits;
	copy_inode_size(dest, src);

	dest->i_flags = src->i_flags;
	print_exit_location();
}

/* auto-generated extern definitions */


#endif /* __KERNEL__ */

/*
 * Definitions for user and kernel code
 */

/* ioctls */

/* SFUSE Functions */
int sfuse_create(inode_t *dir, struct dentry *dentry, int mode, 
		 struct nameidata *nd);


#endif	/* not __SFUSE_H_ */

/*
 * Local variables:
 * c-basic-offset: 4
 * End:
 */
